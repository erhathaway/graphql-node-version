
/**********************************************
 *
 * DO NOT EDIT THIS FILE
 *
 * Generated from graphql_node_version
 *
 ******************************************** */


exports.up = async function(knex) {
    await knex.schema.createTable('version_event_implementor_type', t => {
        t.increments('id')
            .unsigned()
            .primary();
        t.string('type').notNullable();
    });

    await knex.table('version_event_implementor_type').insert([
        {
            type: 'NODE_CHANGE',
            id: '1'
        },
        {
            type: 'NODE_FRAGMENT_CHANGE',
            id: '2'
        },
        {
            type: 'LINK_CHANGE',
            id: '3'
        }
    ]);

    await knex.schema.createTable('version_event', t => {
        t.increments('id')
            .unsigned()
            .primary();
        t.integer('implementor_type_id')
            .unsigned()
            .notNullable()
            .references('id')
            .inTable('version_event_implementor_type');
        t.timestamp('created_at').notNullable();
        t.string('user_id').notNullable();
        t.string('node_name').notNullable();
        t.string('node_id').notNullable();
        t.string('resolver_operation').notNullable();
    });

    await knex.schema.createTable('version_event_link_change', t => {
        t.increments('id')
            .unsigned()
            .primary();
        t.integer('event_id')
            .unsigned()
            .notNullable()
            .references('id')
            .inTable('version_event');
        t.string('node_name').notNullable();
        t.string('node_id').notNullable();
    });

    await knex.schema.createTable('version_event_node_change', t => {
        t.increments('id')
            .unsigned()
            .primary();
        t.integer('event_id')
            .unsigned()
            .notNullable()
            .references('id')
            .inTable('version_event');
        t.json('revision_data').notNullable();
        t.string('schema_version').notNullable();
    });

    await knex.schema.createTable('version_event_node_fragment_register', t => {
        t.increments('id')
            .unsigned()
            .primary();
        t.string('parent_node_id').notNullable();
        t.string('parent_node_name').notNullable();
        t.string('child_node_id').notNullable();
        t.string('child_node_name').notNullable();
    });

    await knex.schema.createTable('version_node_snapshot', t => {
        t.increments('id')
            .unsigned()
            .primary();

        t.integer('event_id')
            .unsigned()
            .notNullable()
            .references('id')
            .inTable('version_event');

        t.json('snapshot').notNullable();
        t.string('node_schema_version').notNullable();
    });

    await knex.schema.createTable('version_role', t => {
        t.increments('id')
            .unsigned()
            .primary();
        t.string('role')
            .notNullable()
            .unique();
    });

    return await knex.schema.createTable('version_user_role', t => {
        t.increments('id')
            .unsigned()
            .primary();
        t.integer('event_id')
            .unsigned()
            .notNullable()
            .references('id')
            .inTable('version_event');
        t.integer('role_id')
            .unsigned()
            .notNullable()
            .references('id')
            .inTable('version_role');
    });
};

exports.down = async function(knex) {
    await knex.schema.dropTable('version_user_role');
    await knex.schema.dropTable('version_role');
    await knex.schema.dropTable('version_event_node_fragment_register');
    await knex.schema.dropTable('version_event_node_change');
    await knex.schema.dropTable('version_event_link_change');
    await knex.schema.dropTable('version_node_snapshot');
    await knex.schema.dropTable('version_event');
    return await knex.schema.dropTable('version_event_implementor_type');
};
